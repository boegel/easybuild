name: Docs build and installation end-to-end tests

on: [push, pull_request]

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with codespell
      run: |
        pip install codespell
        # it is (currently) impossible to dismiss ignored suggestions but these are
        # still added to the exit code (which is a just a count of spelling
        # suggestions). Since we know we have one of these, we allow for that.
        # see https://github.com/easybuilders/easybuild/pull/485 for details
        bash .github/workflows/check_with_codespell.sh
    - name: Test with sphinx
      run: |
        pip install sphinx
        # This test is weak, options -nWT would make it stronger but we have many warnings...
        READTHEDOCS=1 sphinx-build docs build
    - name: Test installation
      run: |
        pip install .
        # test installation too (using options that don't require to have a modules tool installed)
        eb --list-easyblocks | grep EB_bzip2
        eb --fetch bzip2-1.0.6.eb
  scripts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: [easybuild-framework, easybuild-easyblocks, easybuild-easyconfigs, easybuild]
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: install EasyBuild (framework-only)
      run: |
        pip install easybuild-framework
        eb --version
    - name: clone repo
      run: |
        cd $HOME
        git clone https://github.com/easybuilders/${{matrix.repo}}.git
        cd ${{matrix.repo}}
        git checkout master
    - name: test create_source_tarball.sh script
      run: |
        cd $HOME/${{matrix.repo}}

        # file to figure out the version from depends on repo
        if [[ ${{matrix.repo}} == "easybuild-framework" ]]; then
            version_file=easybuild/tools/version.py
        elif [[ ${{matrix.repo}} == "easybuild-easyblocks" ]]; then
            version_file=easybuild/easyblocks/__init__.py
        else
            version_file=setup.py
        fi
        version=$(grep '^VERSION' $version_file | sed 's/[^0-9]*\([0-9a-zA-Z.]*\).*/\1/g')
        echo "${{matrix.repo}} version: $version"

        echo "testing with '$GITHUB_WORKSPACE/scripts/create_source_tarball.sh ${{matrix.repo}} $version'"

        out=$HOME/out.txt
        
        echo "================================================================================================"

        # check use of script outside correct directory
        cd $HOME
        ($GITHUB_WORKSPACE/scripts/create_source_tarball.sh ${{matrix.repo}} $version 2>&1 | tee $out) || true
        grep "ERROR: Expected to be in ${{matrix.repo}} directory" $out
        echo "Expected error found in output: OK!"
        
        echo "================================================================================================"

        # existing source tarball in dist should result in an error
        cd ${{matrix.repo}}
        mkdir -p dist
        touch dist/${{matrix.repo}}-${version}.tar.gz
        ($GITHUB_WORKSPACE/scripts/create_source_tarball.sh ${{matrix.repo}} $version 2>&1 | tee $out) || true
        grep "ERROR: Found dist/${{matrix.repo}}-${version}.tar.gz" $out
        echo "Expected error found in output: OK!"
        rm dist/${{matrix.repo}}-${version}.tar.gz
        
        echo "================================================================================================"

        # check for error when script is run in a dirty working copy
        touch dirty.txt
        ($GITHUB_WORKSPACE/scripts/create_source_tarball.sh ${{matrix.repo}} $version 2>&1 | tee $out) || true
        grep "ERROR: Working directory not clean" $out
        echo "Expected error found in output: OK!"
        rm dirty.txt
        
        echo "================================================================================================"

        # script should fail if expected source tarball did not get created in dist/
        mkdir -p /tmp/$USER/bin
        echo '#!/bin/bash' > /tmp/$USER/bin/python
        chmod u+x /tmp/$USER/bin/python
        export PATH=/tmp/$USER/bin:$PATH
        ($GITHUB_WORKSPACE/scripts/create_source_tarball.sh ${{matrix.repo}} $version 2>&1 | tee $out) || true
        grep "ERROR: Expected file dist/${{matrix.repo}}-${version}.tar.gz not found!" $out
        echo "Expected error found in output: OK!"
        
        echo "================================================================================================"

        # script should deal well with failing 'python setup.py sdist'
        echo 'exit 1' >> /tmp/$USER/bin/python
        ($GITHUB_WORKSPACE/scripts/create_source_tarball.sh ${{matrix.repo}} $version 2>&1 | tee $out) || true
        grep "ERROR: Creating source tarball failed" $out
        echo "Expected error found in output: OK!"
        rm /tmp/$USER/bin/python
        
        echo "================================================================================================"

        # using of script with incorrect version should result in an error
        ($GITHUB_WORKSPACE/scripts/create_source_tarball.sh ${{matrix.repo}} 0.0.0 2>&1 | tee $out) || true
        grep "ERROR: Expected file dist/${{matrix.repo}}-0.0.0.tar.gz not found!" $out
        echo "Expected error found in output: OK!"
        rm -f dist/${{matrix.repo}}-${version}.tar.gz MANIFEST
        
        echo "================================================================================================"

        # check use of script in correct way, should yield "SUCCESS" in output
        $GITHUB_WORKSPACE/scripts/create_source_tarball.sh ${{matrix.repo}} $version 2>&1 | tee $out
        grep SUCCESS $out
        # no errors in output
        errors=$(grep ERROR $out || true)
        if [ ! -z $errors ]; then "Errors found: $errors"; fi

        echo "Correct run of script OK!"
